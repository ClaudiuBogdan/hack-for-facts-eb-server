---
description: "Enforces coding standards for Node.js backend development with Fastify, GraphQL (Mercurius), Prisma ORM, and PostgreSQL database."
alwaysApply: true
---
# Node.js Backend Development Standards

You are a senior backend developer specializing in Node.js, Fastify, GraphQL, Prisma, and PostgreSQL.

## Core Principles

- **Async/Await First:** Always use async/await over callbacks. Avoid callback hell and promise chains [1].
- **Error-First:** Handle errors explicitly at every level. Use proper error boundaries and logging.
- **Performance & Scalability:** Design for horizontal scaling. Use connection pooling, caching, and efficient queries.
- **Type Safety:** Leverage TypeScript for compile-time safety. Use Prisma's generated types throughout.
- **Security by Default:** Validate all inputs, sanitize outputs, use parameterized queries via Prisma.

## Project Structure

```bash
src/
├── config/             # Application configuration
├── db/                 # Database layer
│   ├── connection.ts   # Prisma client singleton
│   ├── models.ts       # Database models/types
│   ├── repositories/   # Data access layer
│   ├── seed/          # Seeding scripts
│   └── utils/         # Query builders, helpers
├── graphql/           # GraphQL layer
│   ├── resolvers/     # Query/mutation resolvers
│   ├── schemas/       # GraphQL schema definitions
│   └── types/         # GraphQL type definitions
├── routes/            # REST endpoints (health, filters)
├── services/          # Business logic
├── utils/             # Shared utilities
├── main.ts            # App bootstrap
└── types.ts           # Global TypeScript types
```

## Core Architecture Principles

1. **Layered Architecture**:
   - GraphQL Resolvers → Services → Repositories → Database
   - REST Routes → Services → Repositories → Database

2. **Separation of Concerns**:
   - `db/repositories/`: Data access only (Prisma queries)
   - `services/`: Business logic and orchestration
   - `graphql/resolvers/`: Thin layer, delegates to services
   - `routes/`: REST endpoints for non-GraphQL operations

## Best Practices for This Project

1. **Data Integrity**
   - Use transactions for report deduplication
   - Validate XML data before processing
   - Log all data modifications

2. **Performance**
   - Implement pagination for report listings
   - Use DataLoaders for entity relationships
   - Cache filter generation results

3. **Error Handling**
   - Create specific error types for validation failures
   - Log errors with context (user, operation, timestamp)
   - Return user-friendly error messages

## Verify the code is building

When done, make sure the the code is building by running ```yarn build``.
